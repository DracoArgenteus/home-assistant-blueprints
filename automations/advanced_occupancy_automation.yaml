---
blueprint:
  name: Advanced Occupancy Light Control
  description: >-
    A comprehensive motion/occupancy-activated light control blueprint.
    Turns on lights when occupancy is detected across one or more sensors.
    Turns them off after a delay when the entire area is clear.
    Includes advanced, optional conditions for sun position (with offsets)
    Based on blueprints by @Aleks130699, @iainsmacleod, and @home-assistant.
  author: DracoArgenteus
  source_url: >-
    https://github.com/DracoArgenteus/automations/heads/main/advanced_occupancy_automation.yaml
  domain: automation

  input:
    occupancy_sensor:
      name: Occupancy Sensor(s)
      description: >-
        The binary sensor(s) that detect presence. The automation will
        trigger if any turn on, and wait for all to turn off.
      selector:
        entity:
          domain: binary_sensor
          multiple: true
          device_class:
            - motion
            - occupancy
            - presence

    light_target:
      name: Light
      description: The light(s) to control.
      selector:
        target:
          entity:
            domain: light

    turn_off_delay:
      name: Turn-off delay
      description: >-
        Time to wait before turning off the light after all occupancy sensors
        are clear.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    # --- Conditions ---
    condition_type:
      name: Condition Type
      description: What condition must be met for the lights to turn on.
      default: "none"
      selector:
        select:
          options:
            - label: "Always On"
              value: "none"
            - label: "Sun Position"
              value: "sun"
            - label: "Fixed Time Range"
              value: "time"

    sun_condition_mode:
      name: Sun Condition
      description: >-
        Turn on the light only when the sun is above or below the horizon.
      default: "below_horizon"
      selector:
        select:
          options:
            - "below_horizon"
            - "above_horizon"
          input: condition_type
          value: sun

    sunset_offset:
      name: Sunset Offset (for Sun condition)
      description: >-
        Optional offset to start the 'below horizon' period earlier (e.g.,
        '00:30:00' to start 30 mins before sunset).
      default: "00:00:00"
      selector:
        time:
          input: condition_type
          value: sun

    sunrise_offset:
      name: Sunrise Offset (for Sun condition)
      description: >-
        Optional offset to end the 'below horizon' period later (e.g.,
        '00:30:00' to end 30 mins after sunrise).
      default: "00:00:00"
      selector:
        time:
          input: condition_type
          value: sun

    time_start:
      name: "Time: Start (for Time condition)"
      description: "Time to start turning the light on (e.g. 18:00:00)."
      selector:
        time:
          input: condition_type
          value: time

    time_end:
      name: "Time: End (for Time condition)"
      description: "Time to stop turning the light on (e.g. 06:00:00)."
      selector:
        time:
          input: condition_type
          value: time

    # --- Light Settings ---
    brightness_pct:
      name: Brightness
      description: >-
        The brightness of the light (0-100). Leave blank to use the light's
        last state.
      default:
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

    color_temp:
      name: Color Temperature (Kelvin)
      description: "Color temperature in Kelvin. Overrides RGB Color if set."
      default:
      selector:
        number:
          min: 2000
          max: 6500
          step: 100
          unit_of_measurement: "K"

    rgb_color:
      name: RGB Color
      description: >-
        The RGB color for the light. Is overridden by Color Temperature if
        set.
      default:
      selector:
        color_rgb:

mode: restart

variables:
  occupancy_entities: !input occupancy_sensor
  condition_type: !input condition_type
  sun_condition_mode: !input sun_condition_mode
  sunset_offset: !input sunset_offset
  sunrise_offset: !input sunrise_offset
  time_start: !input time_start
  time_end: !input time_end
  brightness_pct: !input brightness_pct
  color_temp: !input color_temp
  rgb_color: !input rgb_color

trigger:
  - platform: state
    entity_id: !input occupancy_sensor
    from: "off"
    to: "on"

condition:
  - condition: template
    value_template: >
      {% if condition_type == 'sun' %}
        {% if sun_condition_mode == 'above_horizon' %}
          {{ is_state('sun.sun', 'above_horizon') }}
        {% else %}
          {% set sunset = state_attr('sun.sun', 'next_setting') | as_datetime | as_local %}
          {% set sunrise = state_attr('sun.sun', 'next_rising') | as_datetime | as_local %}
          {% set sunset_offset_delta = timedelta(hours=sunset_offset.split(':')[0]|int, minutes=sunset_offset.split(':')[1]|int) %}
          {% set sunrise_offset_delta = timedelta(hours=sunrise_offset.split(':')[0]|int, minutes=sunrise_offset.split(':')[1]|int) %}
          {{ now() >= (sunset - sunset_offset_delta) or now() <= (sunrise + sunrise_offset_delta) }}
        {% endif %}
      {% elif condition_type == 'time' %}
        {% if time_start is defined and time_end is defined %}
          {% set time_now = now() %}
          {% set time_start_obj = today_at(time_start) %}
          {% set time_end_obj = today_at(time_end) %}
          {% if time_start_obj < time_end_obj %}
            {{ time_start_obj <= time_now < time_end_obj }}
          {% else %}
            {{ time_now >= time_start_obj or time_now < time_end_obj }}
          {% endif %}
        {% else %}
          true
        {% endif %}
      {% else %}
        true
      {% endif %}

action:
  - service: light.turn_on
    target: !input light_target
    data:
      brightness_pct: >-
        "{{ brightness_pct if brightness_pct is defined else omit }}"
      kelvin: "{{ color_temp if color_temp is defined else omit }}"
      rgb_color: >-
        {{ rgb_color if color_temp is not defined and rgb_color is defined
        else omit }}

  - wait_template: >-
      {{ expand(occupancy_entities) | selectattr('state', 'eq', 'off') | list
      | count == expand(occupancy_entities) | list | count }}
    for:
      seconds: !input turn_off_delay

  - service: light.turn_off
    target: !input light_target
