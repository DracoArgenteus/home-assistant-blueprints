---
blueprint:
  name: Advanced Occupancy Light Control
  description: >-
    A comprehensive motion/occupancy-activated light control blueprint.
    Turns on lights when occupancy is detected and turns them off after a delay.
    Includes advanced, optional conditions for sun position and fixed time ranges.
    Based on blueprints by @Aleks130699, @iainsmacleod, and @home-assistant.
  author: DracoArgenteus
  source_url: https://github.com/DracoArgenteus/automations/heads/main/advanced_occupancy_automation.yaml
  domain: automation

  input:
    occupancy_sensor:
      name: Occupancy Sensor
      description: The binary sensor that detects presence (e.g., motion, occupancy). Must have 'on' and 'off' states.
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
            - presence

    light_target:
      name: Light
      description: The light(s) to control.
      selector:
        target:
          entity:
            domain: light

    turn_off_delay:
      name: Turn-off delay
      description: Time to wait before turning off the light after occupancy is no longer detected.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds

    # --- Conditions ---
    condition_type:
      name: Condition Type
      description: What condition must be met for the lights to turn on.
      default: "none"
      selector:
        select:
          options:
            - label: "Always On"
              value: "none"
            - label: "Sun Position"
              value: "sun"
            - label: "Fixed Time Range"
              value: "time"

    sun_condition_mode:
      name: Sun Condition
      description: "Turn on the light only when the sun is above or below the horizon."
      default: "below_horizon"
      selector:
        select:
          options:
            - "below_horizon"
            - "above_horizon"

    time_after:
      name: "Time: After"
      description: "Time to start turning the light on (e.g. 18:00:00)."
      selector:
        time:

    time_before:
      name: "Time: Before"
      description: "Time to stop turning the light on (e.g. 06:00:00)."
      selector:
        time:

    # --- Light Settings ---
    brightness_pct:
      name: Brightness
      description: "The brightness of the light (0-100). Leave blank to use the light's last state."
      default:
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"

    color_temp:
      name: Color Temperature (Kelvin)
      description: "Color temperature in Kelvin. Overrides RGB Color if set."
      default:
      selector:
        number:
          min: 2000
          max: 6500
          step: 100
          unit_of_measurement: "K"

    rgb_color:
      name: RGB Color
      description: "The RGB color for the light. Is overridden by Color Temperature if set."
      default:
      selector:
        color_rgb:

mode: restart

variables:
  condition_type: !input condition_type
  sun_condition_mode: !input sun_condition_mode
  time_after: !input time_after
  time_before: !input time_before
  # Assign inputs to variables for use in templates
  brightness_pct: !input brightness_pct
  color_temp: !input color_temp
  rgb_color: !input rgb_color

trigger:
  - platform: state
    entity_id: !input occupancy_sensor
    from: "off"
    to: "on"
    # Wait for the sensor to be 'on' for a second to avoid false triggers
    for:
      seconds: 1

condition:
  - condition: template
    value_template: >
      {#- Always true if no condition is selected -#}
      {% if condition_type == 'none' %}
        true
      {#- Logic for Fixed Time Range -#}
      {% elif condition_type == 'time' %}
        {% if time_after is defined and time_before is defined %}
          {% set time_now = now() %}
          {% set time_after_obj = today_at(time_after) %}
          {% set time_before_obj = today_at(time_before) %}
          {% if time_after_obj < time_before_obj %}
            {#- Time range is on the same day (e.g., 09:00 to 17:00) -#}
            {{ time_after_obj <= time_now < time_before_obj }}
          {% else %}
            {#- Time range spans across midnight (e.g., 22:00 to 06:00) -#}
            {{ time_now >= time_after_obj or time_now < time_before_obj }}
          {% endif %}
        {% else %}
          {#- If times are not defined, pass the condition -#}
          true
        {% endif %}
      {#- Logic for Sun Position -#}
      {% elif condition_type == 'sun' %}
        {{ is_state('sun.sun', sun_condition_mode) }}
      {% endif %}

action:
  # 1. Turn on the light
  - service: light.turn_on
    target: !input light_target
    data: >
      {%- set light_data = {} -%}
      {%- if brightness_pct is defined and brightness_pct != none and brightness_pct != '' -%}
        {%- do light_data.update({'brightness_pct': brightness_pct}) -%}
      {%- endif -%}
      {%- if color_temp is defined and color_temp != none and color_temp != '' -%}
        {%- do light_data.update({'kelvin': color_temp}) -%}
      {%- elif rgb_color is defined and rgb_color != none and rgb_color != '' -%}
        {%- do light_data.update({'rgb_color': rgb_color}) -%}
      {%- endif -%}
      {{ light_data | to_json }}

  # 2. Wait for occupancy to end
  - wait_for_trigger:
      - platform: state
        entity_id: !input occupancy_sensor
        from: "on"
        to: "off"

  # 3. Wait for the specified delay
  - delay:
      seconds: !input turn_off_delay

  # 4. Turn off the light
  - service: light.turn_off
    target: !input light_target
